version: '3.9'
name: datomic-cluster

services:
  memcached:
    container_name: memcached
    image: memcached:${MEMCACHED_IMAGE_TAG}
    command: memcached -m ${MEMCACHED_MAX_RAM}
    ports:
      - ${MEMCACHED_HOST_MAPPING_PORT}:11211
    restart: always
    networks:
      datomic-network:
        ipv4_address: 192.168.200.2
    healthcheck:
      test: echo stats | nc 127.0.0.1 11211
      interval: 10s
      retries: 60

  postgres:
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    image: postgres:${POSTGRES_CONTAINER_TAG}
    command: postgres -c 'max_connections=1024'
    ports:
      - ${POSTGRES_HOST_MAPPING_PORT}:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      datomic-network:
        ipv4_address: 192.168.200.3
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 30

  postgres-migrator:
    container_name: postgres-migrator
    environment:
      - PGUSER=postgres
      - PGPASSWORD=${POSTGRES_PASSWORD}
    image: postgres:16.1-bullseye
    volumes:
      - "./postgres-migrations:/migrations"
    command: >
      sh -c 'psql -h postgres -f /migrations/postgres-db.sql &&
             psql -h postgres -d datomic -f /migrations/postgres-table.sql &&
             psql -h postgres -d datomic -f /migrations/postgres-user.sql'
    networks:
      datomic-network:
        ipv4_address: 192.168.200.253
    depends_on:
      postgres:
        condition: service_healthy

  transactor:
    build:
      context: ../
      args:
        DATOMIC_VERSION: 1.0.7075
      dockerfile: Dockerfile
    ports:
      - "4336:4336"
      - "4335:4335"
      - "4334:4334"
      - "9999:9999"
    environment:
      - RUN_MODE=TRANSACTOR
      - TRANSACTOR_HOST=192.168.200.4
      - TRANSACTOR_ALT_HOST=127.0.0.1
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_PASSWORD=datomic
      - PG_USER=datomic
      - PG_DATABASE=datomic
      - MEMCACHED_HOST=192.168.200.2
    healthcheck:
      test: ["CMD-SHELL", 'if [[ $(curl -s -o /dev/null -w "%{http_code}" -X GET http://transactor:9999/health)  = "200" ]]; then echo 0; else echo 1; fi']
      interval: 10s
      timeout: 3s
      retries: 30
    networks:
      datomic-network:
        ipv4_address: 192.168.200.4
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      memcached:
        condition: service_healthy
      postgres-migrator:
        condition: service_completed_successfully

  datomic-db-initialization:
    build:
      context: ../
      args:
        DATOMIC_VERSION: 1.0.7075
      dockerfile: Dockerfile
    environment:
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_PASSWORD=datomic
      - PG_USER=datomic
      - PG_DATABASE=datomic
      - DATOMIC_DB_NAME=${DATOMIC_DB_NAME}
      - RETRIES=${DATOMIC_DB_CREATION_RETRIES}
    volumes:
      - "./datomic-database-initialization/initialize_database.clj:/datomic-pro/initialize_database.clj"
    restart: on-failure:1
    entrypoint: /datomic-pro/bin/run /datomic-pro/initialize_database.clj
    networks:
      datomic-network:
        ipv4_address: 192.168.200.254
    depends_on:
      postgres:
        condition: service_healthy
      postgres-migrator:
        condition: service_completed_successfully
      memcached:
        condition: service_healthy
      transactor:
        condition: service_healthy

  peer:
    build:
      context: ../
      args:
        DATOMIC_VERSION: 1.0.7075
      dockerfile: Dockerfile
    ports:
      - "8998:8998"
    environment:
      - RUN_MODE=PEER
      - PEER_HOST=192.168.200.5
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_PASSWORD=datomic
      - PG_USER=datomic
      - PG_DATABASE=datomic
      - DATOMIC_DB_NAME=${DATOMIC_DB_NAME}
      - PEER_ACCESSKEY=${PEER_ACCESSKEY}
      - PEER_SECRET=${PEER_SECRET}
    restart: always
    networks:
      datomic-network:
        ipv4_address: 192.168.200.5
    depends_on:
      postgres:
        condition: service_healthy
      memcached:
        condition: service_healthy
      transactor:
        condition: service_healthy
      datomic-db-initialization:
        condition: service_completed_successfully


networks:
  datomic-network:
    driver: bridge
    ipam:
      driver: default
      config:
        -
          subnet: 192.168.200.0/24

volumes:
  postgres-data:
